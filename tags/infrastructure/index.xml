<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>infrastructure on Daniel Martins</title><link>https://danielfm.me/tags/infrastructure/</link><description>Recent content in infrastructure on Daniel Martins</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://danielfm.me/tags/infrastructure/index.xml" rel="self" type="application/rss+xml"/><item><title>Pain(less?) NGINX Ingress</title><link>https://danielfm.me/post/painless-nginx-ingress/</link><pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate><guid>https://danielfm.me/post/painless-nginx-ingress/</guid><description>So you have a Kubernetes cluster and are using (or considering using) the NGINX ingress controller to forward outside traffic to in-cluster services. That&amp;rsquo;s awesome!
The first time I looked at it, everything looked so easy; installing the NGINX ingress controller was one helm install away, so I did it. Then, after hooking up the DNS to the load balancer and creating a few Ingress resources, I was in business.</description></item><item><title>Five Months of Kubernetes</title><link>https://danielfm.me/post/five-months-of-kubernetes/</link><pubDate>Wed, 14 Sep 2016 00:00:00 +0000</pubDate><guid>https://danielfm.me/post/five-months-of-kubernetes/</guid><description>For the past year, Descomplica moved towards a more service-oriented architecture for its core components (auth, search, etc) and we&amp;rsquo;ve been using Elastic Beanstalk from the start to orchestrate the deployment of those services to AWS.
It was a good decision at the time. In general, Elastic Beanstalk works fine and has a very gentle learning curve; it didn&amp;rsquo;t take long for all teams to start using it for their projects.</description></item></channel></rss>