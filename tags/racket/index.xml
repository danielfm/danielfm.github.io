<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>racket on Daniel Martins</title><link>https://danielfm.me/tags/racket/</link><description>Recent content in racket on Daniel Martins</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 05 Jun 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://danielfm.me/tags/racket/index.xml" rel="self" type="application/rss+xml"/><item><title>Why Are Continuations So Darn Cool?</title><link>https://danielfm.me/post/why-are-continuations-cool/</link><pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate><guid>https://danielfm.me/post/why-are-continuations-cool/</guid><description>Continuations are the least understood of all control-flow constructs. This lack of understanding (or awareness) is unfortunate, given that continuations permit the programmer to implement powerful language features and algorithms.
&amp;ndash; Matt Might, in Continuations By Example
The usual way to control the flow of execution of a computer program is via procedure calls and returns; a stack data structure is how high-level programming languages keep track of the point to which each active subroutine should return control when it finishes executing.</description></item></channel></rss>